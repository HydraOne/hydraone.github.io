<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>oracle</title>
    <link href="/2022/12/28/oracle/"/>
    <url>/2022/12/28/oracle/</url>
    
    <content type="html"><![CDATA[<h3 id="视图">视图</h3><p>创建或修改视图语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">OR</span> REPLACE] [FORCE] <span class="hljs-keyword">VIEW</span> view_name <br><span class="hljs-keyword">AS</span> subquery <br>[<span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CHECK</span> OPTION ] <br>[<span class="hljs-keyword">WITH</span> READ <span class="hljs-keyword">ONLY</span>]<br></code></pre></td></tr></table></figure><p>选项解释</p><ul><li>OR REPLACE ：若所创建的试图已经存在，ORACLE 自动重建该视图；</li><li>FORCE ：不管基表是否存在 ORACLE 都会自动创建该视图；</li><li>subquery ：一条完整的 SELECT 语句，可以在该语句中定义别名；</li><li>WITH CHECK OPTION ：插入或修改的数据行必须满足视图定义的约束；</li><li>WITH READ ONLY ：该视图上不能进行任何 DML 操作。</li></ul><p>删除视图语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> view_name<br></code></pre></td></tr></table></figure><h3 id="物化视图">物化视图</h3><h4 id="什么是物化视图">什么是物化视图</h4><p>视图是一个虚拟表（也可以认为是一条语句），基于它创建时指定的查询语句返回的结果集。每次访问它都会导致这个查询语句被执行一次。为了避免每次访问都执行这个查询，可以将这个查询结果集存储到一个物化视图（也叫实体化视图）。<br>物化视图与普通的视图相比的区别是物化视图是建立的副本，它类似于一张表，需要占用存储空间。而对一个化视图查询的执行效率与查询一个表是一样的。</p><h4 id="创建物化视图语法">创建物化视图语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> METERIALIZED <span class="hljs-keyword">VIEW</span> view_name<br>[BUILD IMMEDIATE <span class="hljs-operator">|</span> BUILD DEFERRED ]<br>REFRESH [FAST<span class="hljs-operator">|</span>COMPLETE<span class="hljs-operator">|</span>FORCE]<br>[<br><span class="hljs-keyword">ON</span> [<span class="hljs-keyword">COMMIT</span> <span class="hljs-operator">|</span>DEMAND ] <span class="hljs-operator">|</span> <span class="hljs-keyword">START</span> <span class="hljs-keyword">WITH</span> (start_time) NEXT<br>(next_time)<br>]<br><span class="hljs-keyword">AS</span><br>subquery<br></code></pre></td></tr></table></figure><ul><li><p>BUILD IMMEDIATE 是在创建物化视图的时候就生成数据</p></li><li><p>BUILD DEFERRED 则在创建时不生成数据，以后根据需要再生成数据。<br><strong>默认为 BUILD IMMEDIATE。</strong></p></li><li><p>刷新（REFRESH）：指当基表发生了 DML 操作后，物化视图何时采用哪种方式和基表进行同步。</p><p>REFRESH 后跟着指定的刷新方法有三种：FAST、COMPLETE、FORCE。FAST刷新采用增量刷新，只刷新自上次刷新以后进行的修改。COMPLETE 刷新对整个物化视图进行完全的刷新。如果选择 FORCE 方式，则 Oracle 在刷新时会去判断是否可以进行快速刷新，如果可以则采用 FAST 方式，否则采用 COMPLETE的方式。FORCE 是默认的方式。</p><p>刷新的模式有两种：ON DEMAND 和 ON COMMIT。ON DEMAND 指需要手动刷新物化视图（默认）。ON COMMIT 指在基表发生 COMMIT 操作时自动刷新。</p></li></ul><h3 id="序列">序列</h3><h4 id="什么是序列">什么是序列</h4><p>序列是 ORACLE 提供的用于产生一系列唯一数字的数据库对象。</p><h4 id="创建与使用简单序列">创建与使用简单序列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> sequence 序列名称<br></code></pre></td></tr></table></figure><p>通过序列的伪列来访问序列的值</p><ul><li>NEXTVAL 返回序列的下一个值</li><li>CURRVAL 返回序列的当前</li></ul><p><strong>注意</strong>：我们在刚建立序列后，无法提取当前值，只有先提取下一个值时才能再次提取当前值。<br>提取下一个值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> 序列名称.nextval <span class="hljs-keyword">from</span> dual<br></code></pre></td></tr></table></figure><p>提取当前值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> 序列名称.currval <span class="hljs-keyword">from</span> dual<br></code></pre></td></tr></table></figure><h4 id="创建复杂序列">创建复杂序列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> SEQUENCE sequence <span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建序列名称<br>[INCREMENT <span class="hljs-keyword">BY</span> n] <span class="hljs-operator">/</span><span class="hljs-operator">/</span>递增的序列值是 n 如果 n 是正数就递增,如果是负数就递减 默<br>认是 <span class="hljs-number">1</span><br>[<span class="hljs-keyword">START</span> <span class="hljs-keyword">WITH</span> n] <span class="hljs-operator">/</span><span class="hljs-operator">/</span>开始的值,递增默认是 minvalue 递减是 maxvalue<br>[&#123;MAXVALUE n <span class="hljs-operator">|</span> NOMAXVALUE&#125;] <span class="hljs-operator">/</span><span class="hljs-operator">/</span>最大值<br>[&#123;MINVALUE n <span class="hljs-operator">|</span> NOMINVALUE&#125;] <span class="hljs-operator">/</span><span class="hljs-operator">/</span>最小值<br>[&#123;<span class="hljs-keyword">CYCLE</span> <span class="hljs-operator">|</span> NOCYCLE&#125;] <span class="hljs-operator">/</span><span class="hljs-operator">/</span>循环<span class="hljs-operator">/</span>不循环<br>[&#123;CACHE n <span class="hljs-operator">|</span> NOCACHE&#125;];<span class="hljs-operator">/</span><span class="hljs-operator">/</span>分配并存入到内存中<br></code></pre></td></tr></table></figure><h3 id="同义词">同义词</h3><h4 id="什么是同义词">什么是同义词</h4><p>同义词实质上是指定方案对象的一个别名。通过屏蔽对象的名称和所有者以及对分布式数据库的远程对象提供位置透明性，同义词可以提供一定程度的安全性。同时，同义词的易用性较好，降低了数据库用户的 SQL 语句复杂度。同义词允许基对象重命名或者移动，这时，只需对同义词进行重定义，基于同义词的应用程序可以继续运行而无需修改。</p><p>你可以创建公共同义词和私有同义词。其中，公共同义词属于 PUBLIC 特殊用户组，数据库的所有用户都能访问；而私有同义词包含在特定用户的方案中，只允许特定用户或者有基对象访问权限的用户进行访问。</p><p>同义词本身不涉及安全，当你赋予一个同义词对象权限时，你实质上是在给同义词的基对象赋予权限，同义词只是基对象的一个别名。</p><h4 id="创建与使用同义词">创建与使用同义词</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> [public] SYNONYM synooym <span class="hljs-keyword">for</span> object<br></code></pre></td></tr></table></figure><p>其中 synonym 表示要创建的同义词的名称，object 表示表，视图，序列等我们要创建同义词的对象的名称。</p><h3 id="索引">索引</h3><h4 id="什么是索引">什么是索引</h4><p>索引是用于加速数据存取的数据对象。合理的使用索引可以大大降低 I/O 次数,从而提高数据访问性能。</p><p>索引是需要占据存储空间的，也可以理解为是一种特殊的数据。形式类似于下图的一棵“树”，而树的节点存储的就是每条记录的物理地址，也就是我们提到的伪列（ROWID）</p><h4 id="普通索引">普通索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> index 索引名称 <span class="hljs-keyword">on</span> 表名(列名);<br></code></pre></td></tr></table></figure><p><strong>eg:</strong> 我们经常要根据业主名称搜索业主信息，所以我们基于业主表的 name 字段来建立索引。语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> index index_owners_name <span class="hljs-keyword">on</span> OWNERS(name)<br></code></pre></td></tr></table></figure><h4 id="唯一索引">唯一索引</h4><p>如果我们需要在某个表某个列创建索引，而这列的值是不会重复的。这是我们可以创建唯一索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index 索引名称 <span class="hljs-keyword">on</span> 表名(列名);<br></code></pre></td></tr></table></figure><h4 id="复合索引">复合索引</h4><p>经常对固定某几列查询时，使用复合索引比分开建立索引效率更高</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> index 索引名称 <span class="hljs-keyword">on</span> 表名(列名,列名.....);<br></code></pre></td></tr></table></figure><h4 id="反向键索引">反向键索引</h4><p>当某个字段的值为连续增长的值，如果构建标准索引，会形成歪脖子树。这样会增加查询的层数，性能会下降。建立反向键索引，可以使索引的值变得不规则，从而使索引树能够均匀分布。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> index 索引名称 <span class="hljs-keyword">on</span> 表名(列名) reverse;<br></code></pre></td></tr></table></figure><h4 id="位图索引">位图索引</h4><p><strong>eg:</strong> 位图索引适合创建在低基数列上,位图索引不直接存储 ROWID，而是存储字节位到 ROWID 的映射<br>优点：减少响应时间，节省空间占用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> bitmap index 索引名称 <span class="hljs-keyword">on</span> 表名(列名);<br></code></pre></td></tr></table></figure><h3 id="常用语句">常用语句</h3><h5 id="查看Oracle-死锁">查看Oracle 死锁</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> dba_.OWNER,<br>       lockobj.ORACLE_USERNAME,<br>       session_.sid,<br>       session_.serial#,<br>       logon_time,<br>       OBJECT_NAME,<br>       DECODE(BLOCK, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;NO&#x27;</span>, <span class="hljs-string">&#x27;YES&#x27;</span>)                                       BLOCKER,<br>       DECODE(REQUEST, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;NO&#x27;</span>, <span class="hljs-string">&#x27;YES&#x27;</span>)                                     WAITER,<br>       lockobj.LOCKED_MODE,<br>       lockobj.OS_USER_NAME,<br>       session_.PROGRAM,<br>       <span class="hljs-string">&#x27;ALTER SYSTEM KILL SESSION &#x27;&#x27;&#x27;</span> <span class="hljs-operator">||</span> session_.SID <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-operator">||</span> session_.SERIAL# <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span> FREESQL<br><span class="hljs-keyword">from</span> v$locked_object lockobj,<br>     v$session session_,<br>     DBA_OBJECTS dba_,<br>     V$LOCK lock_<br><span class="hljs-keyword">where</span> lockobj.session_id <span class="hljs-operator">=</span> session_.sid<br>  <span class="hljs-keyword">and</span> dba_.OBJECT_ID <span class="hljs-operator">=</span> lockobj.OBJECT_ID<br>  <span class="hljs-keyword">and</span> session_.SID <span class="hljs-operator">=</span> lock_.SID<br>  <span class="hljs-keyword">and</span> (REQUEST <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> BLOCK <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> session_.logon_time;<br></code></pre></td></tr></table></figure><h5 id="查看Session正在执行的语句">查看Session正在执行的语句</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> sql_text<br><span class="hljs-keyword">FROM</span> v$sqltext a<br><span class="hljs-keyword">WHERE</span> (a.hash_value, a.address) <span class="hljs-keyword">IN</span><br>      (<span class="hljs-keyword">SELECT</span> DECODE(sql_hash_value, <span class="hljs-number">0</span>, prev_hash_value, sql_hash_value),<br>              DECODE(sql_hash_value, <span class="hljs-number">0</span>, prev_sql_addr, sql_address)<br>       <span class="hljs-keyword">FROM</span> v$session b<br>       <span class="hljs-keyword">where</span> SID <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;41&#x27;</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> piece;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/2022/12/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2022/12/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="图">图</h2><h3 id="并查集">并查集</h3><pre><code class=" mermaid">stateDiagram-v2direction LR    5 --&gt; 5    4 --&gt; 5    3 --&gt; 4    2 --&gt; 3    1 --&gt; 2</code></pre><h4 id="查询">查询</h4><p>查询图中的两个顶点是不是在同一个集合中。</p><blockquote><p><strong>注意</strong>：并查集只回答两个顶点之间是否有一条路径连接，而不回答怎么连接。</p></blockquote><p>找到i的祖先直接返回，未进行路径压缩</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(fa[i]=i) <span class="hljs-comment">//递归出口，当达到祖先位置，就返回祖先</span><br>        <span class="hljs-keyword">return</span> i;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> find(fa[i]); <span class="hljs-comment">//不断往上查找祖先</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="合并">合并</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">union</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i_fa</span> <span class="hljs-operator">=</span> find[i]; <span class="hljs-comment">// 找到i的祖先</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">j_fa</span> <span class="hljs-operator">=</span> find[j]; <span class="hljs-comment">// 找到j的祖先</span><br>    fa[i_fa] = j_fa; <span class="hljs-comment">// i的祖先指向j的祖先</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>路径压缩</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(fa[i]=i) <span class="hljs-comment">//递归出口，当达到祖先位置，就返回祖先</span><br>        <span class="hljs-keyword">return</span> i;<br>    <span class="hljs-keyword">else</span><br>        fa[i]=find(fa[i]); <span class="hljs-comment">//该步进行了路径压缩</span><br>    <span class="hljs-keyword">return</span> fa[i];<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">stateDiagram-v2direction BT    5 --&gt; 5    4 --&gt; 5    3 --&gt; 5    2 --&gt; 5    1 --&gt; 5</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常用工具集合</title>
    <link href="/2022/12/16/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/"/>
    <url>/2022/12/16/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h3 id="笔记工具">笔记工具</h3><ul><li><a href="">博客Hexo</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux常规使用</title>
    <link href="/2022/12/15/Linux%E5%B8%B8%E8%A7%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/12/15/Linux%E5%B8%B8%E8%A7%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="操作系统概述">操作系统概述</h3><p>操作系统 Operating System 简称 OS，通俗讲就是一款软件，不过和一般的软件不同，操作系统是管理和控制计算机硬件与软件资源的计算机程序，是直接运行在“裸机”上的最基本的系统软件，任何其他的软件都必须在操作系统的支持下才能运行。</p><h3 id="Linux-操作系统安装">Linux 操作系统安装</h3><p>关于 Linux 的安装看这篇——Linux的安装教程</p><blockquote><ul><li><a href="https://blog.csdn.net/huaijiu123/article/details/82083452">https://blog.csdn.net/huaijiu123/article/details/82083452</a></li></ul></blockquote><h3 id="Linux-文件系统">Linux 文件系统</h3><ul><li><code>/var</code>：包含在正常操作中被改变的文件、假脱机文件、记录文件、加锁文件、临时文件和页格式化文件等。</li><li><code>/home</code>：包含用户的文件：参数设置文件、个性化文件、文档、数据、EMALL、缓存数据等，每增加一个用户，系统就会根据其用户名在 home 目录下新建和其他用户同名的文件夹，用于保存其用户配置。</li><li><code>/proc</code>：包含虚幻的文件，他们实际上并不存在于磁盘上，也不占用任何空间（用 ls-l 可以显示它们的大小）当查看这些文件时，实际上是在访问存在内存中的信息，这些信息用于访问系统。</li><li><code>/bin</code>：包含系统启动时需要的执行文件（二进制），这些文件可以被普通用户使用。</li><li><code>/etc</code>：为操作系统的配置文件目录（防火墙、启动项）</li><li><code>/root</code>：为系统管理员（也叫超级用户或根用户）的 Home 目录。</li><li><code>/dev</code>：为设备目录，Linux 下设备被当成文件，这样一来硬件被抽象化、便于读写、网络共享以及需要临时装载到文件系统中，正常情况下，设备会有一个独立的子目录，这些设备的内容会出现在独立的子目录下。</li></ul><h3 id="Linux-命令操作">Linux 命令操作</h3><ul><li><p><strong>查看当前目录命令：<code>pwd</code></strong></p></li><li><p><strong>打开文件夹命令：<code>cd</code></strong></p></li><li><ul><li>打开指定文件夹：<code>cd [目录名称]</code></li><li>打开当前用户的根目录：<code>cd ~</code></li><li>返回上级目录：<code>cd …</code></li><li>返回进入目录：<code>cd -</code></li><li>打开根目录：<code>cd /</code></li></ul></li><li><p><strong>浏览目录下的文件列表命令：<code>ls</code></strong></p></li><li><ul><li>以列的方式查看当前目录下的文件列表：<code>ls -l</code></li><li>查看当前目录下所有的文件（包括隐藏文件）：<code>ls -a</code></li><li>以列表的方式查看当前目录下的所有文件：<code>ls -la</code></li></ul></li><li><p><strong>创建文件目录命令：<code>mkdir</code></strong></p></li><li><ul><li>新建文件目录：<code>mkdir 文件夹名称</code></li><li>递归新建多级目录：<code>mkdir -p 文件夹名称</code></li><li>例如在用户目录下新建 test 目录，命令这样写：<code>mkdir -p test/test1/test2/test3</code> 递归新建多级目录的写法</li></ul></li><li><p><strong>删除文件目录命令：<code>rmkdir</code></strong></p></li><li><ul><li>删除指定目录：<code>rmkdir 目录名称</code></li><li>递归删除指定目录及中间目录：<code>rmdir -p 目录名称</code> 这里没有写错，没有字母 k</li></ul></li><li><p><strong>删除文件或者目录命令：<code>rm</code></strong></p></li><li><ul><li>常用命令：<code>rm -rf [目录或文件]</code> <code>rm -ri [目录或文件]</code></li><li>强制删除文件或目录：<code>rm -rf 目录或者文件</code></li><li>在删除前询问是否确认删除：<code>rm -ri 目录或文件</code></li></ul></li></ul><blockquote><p>因为强制删除的后果不太好，一般不建议使用 <code>rm -rf</code> 进行文件删除</p><p>rm 命令中不跟 r 参数，无法删除目录，只能删除文件</p></blockquote><ul><li><p><strong>复制文件或目录命令：<code>cp</code></strong></p></li><li><ul><li>递归复制目录1下的所有的文件和文件夹到目录2：<code>cp -r [目录1][目录2]</code></li><li>执行复制操作时覆盖原有目录前询问用户：<code>cp -ri [目录1][目录2]</code></li></ul></li><li><p><strong>移动文件、修改文件名命令：<code>mv</code></strong></p></li><li><ul><li>将文件夹1名称更改为文件夹2：<code>mv 文件1 文件2</code> (给文件更名)</li><li>将目录1的文件移动到目录2：<code>mv 目录2 目录2</code> (将目录1的文件移动到目录2)</li></ul></li><li><p><strong>创建文件命令：<code>touch</code></strong></p></li><li><ul><li>touch 文件名称</li></ul></li><li><p><strong>查看、编辑文件命令：<code>vi</code></strong></p></li><li><ul><li>vi 命令为 UNIX 操作系统或者类 UNIX 操作系统都有具有的功能强大的文件编辑命令，用户输入 vi ++ 文件名，便可以进入 vi 模式进行文件内容的查看和编辑，如果文件已经存在，则直接打开文件，如果文件不存在，则系统将打开一个全新的空文件。</li></ul></li></ul><p>vi 的三种模式如下：</p><ol><li>命令模式</li></ol><p>当用户使用 vi 命令打开文件后，则进入命令模式，用户可以输入命令来执行各种功能。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbufEQTRibHEQJMC2IfHT3YmRAhuicP6icN2Z3pOgn9vOQ9FhiaSYG6SfJTEpvjjS7cFyTpHr6pQzshPOwg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><ol><li>输入模式</li></ol><p>如果用户要对文件做修改，则可以使用下面几种命令，进入输入模式，用户进入输入模式之后，可以任意修改文件，除了 Esc 键外，用户输入的任何字符都会被作为内容写入文件中，用户输入 Esc 可以对文件进行相关操作。</p><p><img src="https://gitee.com/HydraOne/picgo/raw/master/img/20221215215347" alt="图片"></p><ol><li>末行模式</li></ol><p>如果用户完成编辑命令，则可以按照 esc + “:” 进入末行模式，用户可以对文件内容继续进行搜索，也可以输入 “:wq!” 进行文件保存并退出，或者输入 “:q!” 强制退出文件编辑。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbufEQTRibHEQJMC2IfHT3YmRA1pv5MGYicSUfMnZkaTdTqvHAsuMZlSE25RkwqBGD9wH2KaPjm4h46Lg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><ul><li><p><strong>查看、编辑文件命令：<code>cat</code></strong></p></li><li><ul><li>显示一个小的文件的内容：<code>cat 文件名称</code></li><li>创建并打开一个新的文件：<code>cat &gt; 文件名称</code></li></ul></li><li><p><strong>查看文件开头内容命令：<code>head</code></strong></p></li><li><ul><li><code>head [参数] [文件名]</code></li></ul></li></ul><p>例如，使用 head 命令显示某个文件开始的 n 行数据：<code>head -n 文件名称</code></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbufEQTRibHEQJMC2IfHT3YmRAXgoqvUAiaiaSv1MgRwAbaQwLIeQe8GEhMmfOiaXIZYFZLAzzAVKKhFWnw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><ul><li><p><strong>查看文件结尾内容命令：<code>tail</code></strong></p></li><li><ul><li>动态加载某个文件的内容（常用于查看日志文件）：<code>tail -f 文件名称</code></li><li>展示文件最后几行的数据：<code>tail -n 行数文件名称</code></li></ul></li></ul><blockquote><p>Linux 权限管理</p></blockquote><h3 id="用户和用户组">用户和用户组</h3><p>用户是指在一个操作系统中，一系列权限的集合体，操作人员通过用户名和口令可以在系统中执行某一些被允许的操作。不同的用户可以具有不同的权限。Linux 操作系统中每个用户都具有唯一标识 UID，当使用命令创建用户时，如果不指定用户的 UID，则系统将自动为其分配 UID。</p><p>用户组就是具有相同特征的用户的集合体，在 Linux 系统中，每一个用户都属于至少一个用户组。Linux 操作系统中每个用户分组都具有唯一标识 GID，当使用命令创建用户组时，如果不指定用户组的 GID，则系统将自动为其分配 GID。当使用 -u 指定用户 id 时，用户 id 尽量大于500，以免冲突。因为 Linux 操作系统安装后，会默认建立一些用户，所以可能会占用 500 之内的 id 号。</p><p>Linux 权限机制有以下特点：</p><ul><li>系统有一个权限最大的用户，其名称为 root ，root 用户属于 root 用户组。</li><li>系统默认只有 root 权限可以添加和删除用户。</li><li>添加用户之后，如果没有给用户指定用户组，则系统会为用户添加一个同名的用户组，用户属于该组。</li><li>root 切换到普通用户无需登录，普通用户切换到 root 用户需要登陆。</li><li>root 可以给用户赋予和回收某一个文件的读、写、执行的权限。</li></ul><h3 id="用户操作命令">用户操作命令</h3><ul><li><p><strong>切换用户命令：<code>su</code></strong></p></li><li><ul><li><code>su [用户名]</code> 或者 <code>su -[用户名]</code></li><li><code>su[用户名]</code>和 <code>su -[用户名]</code>都可以切换用户，前者类似于临时切换用户，当使用该命令进行切换新用户时，用户配置仍然沿用原来的用户配置，如环境变量、系统变量等。而后者进行切换用户时，环境变量、系统设置全部切换成新用户的用户配置。</li></ul></li><li><p><strong>查看当前登陆用户命令：<code>whoami</code></strong></p></li><li><p><strong>查看当前用户所属分组命令：<code>groups</code></strong></p></li><li><p><strong>查看当前用户 UID 和 GID 命令：<code>id</code></strong></p></li><li><p><strong>添加新用户命令：<code>useradd</code></strong></p></li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbufEQTRibHEQJMC2IfHT3YmRAAljfmvoqz0GlTTgRV6qopysxnicFibVrnxFr2pN2gproxnYiadaRicuSjQ/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>在 Linux 操作系统中添加用户：<code>useradd 用户名</code></p><p>在 Linux 操作系统中添加用户并指定用户 UID：<code>useradd -u</code> 指定的 UID 用户名</p><ul><li>**修改用户密码命令：<code>passwd</code>**例如：修改当前用户名为 sang 的用户密码：<code>passwd sang</code></li></ul><p>在添加用户之后，只有为其设置密码，用户才能登陆</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbufEQTRibHEQJMC2IfHT3YmRATetM0PqJcdSFUnf5ibhgKt4jxGcnnibQkl3qBfqYL4EIHHWfqgItibIUg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><ul><li><p><strong>删除用户命令：<code>userdel</code></strong></p></li><li><ul><li>删除用户：<code>userdel 用户名</code></li><li>删除用户并同时删除其登陆信息：<code>userdel -r 用户名</code></li></ul></li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbufEQTRibHEQJMC2IfHT3YmRAm4Ik1Wic2XtARX9MpxZJtJX8nACCyEfGSNo2clgCT9qFRxMMkj21VoA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><ul><li><p><strong>修改用户信息命令：<code>usermod</code></strong></p></li><li><ul><li>语法：<code>usermod [选项] [参数] [用户名]</code></li><li>修改用户登录名：<code>usermod -l 新用户名 旧用户名</code></li><li>修改用户所属分组：<code>usermod -g 新组名称 用户名</code></li></ul></li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbufEQTRibHEQJMC2IfHT3YmRAenicHeVwwKqSPO88vHnAhfZT7x9V7GINN5L8RgE6pf23RaOZ4Z76uLg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><ul><li><p><strong>添加用户组命令：<code>groupadd</code></strong></p></li><li><ul><li>语法：<code>groupadd [选项] [组名称]</code></li><li>修改用户登陆名：<code>groupadd 组名</code></li><li>修改用户所属分组：<code>groupadd -g 组 GID 组名</code></li></ul></li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbufEQTRibHEQJMC2IfHT3YmRAzRQWzicFTXjiayCTxsic2r3s9gjZr8BnibvwSODBicySnGCODwZJZ2pXV5w/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><h3 id="权限操作">权限操作</h3><p>Linux 操作系统为文件定义了读、写、执行三种权限，不同的用户或者用户组可以具有不同的权限，系统采用 “r”、“w”、“x” 来分别表示文件的读、写、执行权限。使用 ls -l 命令可以查看到用户在当前目录或者文件的操作权限。</p><p>举列：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">drwxr</span> -xr -x. <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> Sep <span class="hljs-number">23</span> <span class="hljs-number">2011</span> bin<br></code></pre></td></tr></table></figure><p>从左至右分别表示如下含义：</p><ul><li><code>d</code>：代表 bin 数目目录而不是文件</li><li><code>rwx</code>：代表拥有者具有读、写、执行的权限</li><li><code>r -x</code>：代表同组用户具有读、执行的权限，但是没有写权限</li><li><code>r -x</code>：代表其他组用户具有读、执行权限，没有写权限</li></ul><p>常用的变更权限命令为：<code>chmod</code></p><p>语法：<code>chmod [选项] [参数]</code></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbufEQTRibHEQJMC2IfHT3YmRAlGK1zvGzibmnP92LLEibGhcZyjBGInDANKsQeKhMxicOUrvqB0uIS9iaIw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>chmod 的参数可以分为两种，分别是权限模式和数字模式。</p><p><strong>权限模式：</strong></p><p>权限模式使用 u、g、o 分别代表拥有者、同组用户、其他组用户，使用 + 和一代表赋予和收回权限，使用 r、w、x 代表读、写、执行权限。</p><p>例如：将文件01的执行权限给当前用户，写权限赋给用户所在的用户组和其他用户。</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tp">chmod -r U+<span class="hljs-keyword">X</span>,G+<span class="hljs-keyword">W</span> F<span class="hljs-number">01</span><br></code></pre></td></tr></table></figure><p>例如：将文件 f01 的读、写、执行的权限赋给当前用户，将读、写权限赋给用户所在的用户组和其他用户。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">chmod -r <span class="hljs-attribute">u</span>=rwx,g=rw,o=rw f01<br></code></pre></td></tr></table></figure><p><strong>数字模式：</strong></p><p>为了简化授权步骤，用户也可以采用数字模式进行授权，使用二进制的形式代表 r、w、x 三种权限，如 <code>101 (5) =r -x</code>，<code>111 (7) =rwx</code>，<code>100 (3) =r- -</code></p><p>例如：将文件 f01 的读、写、执行的权限赋给当前用户，将读和执行权限赋给用户组、将写和执行权限赋给其他用户。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">753</span> -r f01<br></code></pre></td></tr></table></figure><p>例如：将文件 f01 的读、写、执行权限赋给所有用户。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">777</span> -r f01<br></code></pre></td></tr></table></figure><h3 id="Linux-进程管理">Linux 进程管理</h3><p>在 Linux 的应用中，我们需要对进程进行管理，如查看某个进程是否启动、以及在必要的时刻，杀掉某个线程。</p><ul><li><strong>查看进程命令：ps</strong></li></ul><p>ps 命令是 Linux 操作系统中查看进程的命令，通过 ps 命令我们可以查看 Linux 操作系统中正在运行的过程，并可以获得进程的 PID（进程的唯一标识），通过 PID 可以对进程进行相应的管理。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> [进程关键字]<br></code></pre></td></tr></table></figure><p>根据进程关键词查看进程命令显示如下，显示的进程列表中第一列表示开启进程的用户，第二列表示进程唯一标识 PID，第三列表示父进程 PPID，第四列表示 CPU 占用资源比列，最后一列表示进程所执行程序的具体位置。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[shang@localhost ~]$ ps -ef|<span class="hljs-keyword">grep</span> sshd<br>root <span class="hljs-number">1829</span> <span class="hljs-number">1</span>  <span class="hljs-number">0</span> May24 ?   <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> <span class="hljs-regexp">/usr/</span>sbin/sshd<br>shang <span class="hljs-number">24166</span> <span class="hljs-number">24100</span>  <span class="hljs-number">0</span>   <span class="hljs-number">20</span>:<span class="hljs-number">17</span> pts/<span class="hljs-number">2</span>  <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>      <span class="hljs-keyword">grep</span>  sshd<br>[shang@localhost ~]$<br></code></pre></td></tr></table></figure><ul><li><strong>杀掉进程命令：kill</strong></li></ul><p>当系统中有进程进入死循环，或者需要被关闭时，我们可以使用 kill 命令对其关闭。</p><p><code>kill -9 [PID]</code> PID 为 Linux 操作系统中进程的标识</p><h3 id="Linux-其他常用命令大全">Linux 其他常用命令大全</h3><ul><li>清屏命令：clear</li><li>查询命令详细参数命令：man</li><li>挂载命令：mnt</li><li>远程连接服务 SSH 相关命令：</li><li>启动 SSH 服务命令：<code>service sshd start</code></li><li>重启 SSH 服务命令：<code>service sshd restart</code></li><li>关闭 SSH 服务命令：<code>service sshd stop</code></li></ul><p>Linux 大多数情况下都是远程服务器，开发者通过远程工具连接 Linux ，启动了某个项目的 JAR，一旦窗口关闭，JAR 也就停止运行了，因此一般通过如下命令启动 JAR：<code>nohup java -jar jar-0.0.1-SNAPSHOT.jar &amp;</code></p><p>这里多了 nohup ，表示当前窗口关闭时服务不挂起，继续在后台运行</p><h3 id="Linux-系统软件安装">Linux 系统软件安装</h3><h5 id="常用软件安装">常用软件安装</h5><p>Linux 下常用的软件安装方式有3种。</p><ul><li><strong>tar 安装</strong>：如果开发商提供的是 tar、tar.gz、<a href="http://tar.bz">tar.bz</a> 格式的包（其中 tar 格式的为打包后没有压缩的包，gz 结尾的是按照 gzip 打包并压缩的软件包，<a href="http://tar.bz">tar.bz</a> 是按照二进制方式打包并压缩的软件包），可以采用 tar 包安装，tar 安装方式本质上是解压软件开发商提供的软件包，之后在通过相应配置，完成软件的安装。</li><li><strong>rpm 安装</strong>：rpm 安装方式是 redhat Linux 系列推出的一个软件包管理器，类似于 Windows 下的 exe 安装程序，可以直接使用 rpm 命令安装。</li><li><strong>yum 安装</strong>：yum 安装本质上依然是 rpm 包安装，和 rpm 安装方式的不同之处是用户可以通过 yum 参数，指定安装的软件包，系统将自动从互联网上下载相应的 rpm 软件包。而无须用户关心软件包的下载地址，以及软件包的依赖关系。</li></ul><p>软件安装常用命令</p><ul><li>解压压缩命令：<code>tar</code></li><li>语法：<code>tar [选项] [压缩包]</code></li><li>解压 gzip 包：<code>tar -zxvf [包名]</code></li><li>解压 bz 包：<code>tar -jxvf [包名]</code></li><li>解压普通包：<code>tar -xvf [包名]</code></li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbufEQTRibHEQJMC2IfHT3YmRA2Eibiak8oCrCXafbcjDzWhbUINefxh8Duib8b9ib71TDhmFN9mrpoJRdrA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><strong>安装卸载命令：rpm</strong></p><ul><li>语法：<code>rpm [选项] [软件包]</code></li><li>查询是否已经安装了某软件包：<code>rpm -qa|grep [软件包关键词]</code></li><li>卸载已经安装的软件包：<code>rpm -e 软件包全名</code></li><li>安装软件包并查看进度：<code>rpm -ivh 软件包路径</code></li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbufEQTRibHEQJMC2IfHT3YmRAb1icG3HB87Ox6bAq3uKNn2icc6G4gRE70L861YzphEyT8rSfmIph2jHg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>*来源：<a href="http://blog.csdn.net/qq_43647359/article/*">blog.csdn.net/qq_43647359/article/*</a><em>details/104792569</em></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>1961</title>
    <link href="/2022/12/15/1961/"/>
    <url>/2022/12/15/1961/</url>
    
    <content type="html"><![CDATA[<h4 id="1691-堆叠长方体的最大高度"><a href="https://leetcode.cn/problems/maximum-height-by-stacking-cuboids/">1691. 堆叠长方体的最大高度</a></h4><p>难度困难88收藏分享切换为英文接收动态反馈</p><p>给你 <code>n</code> 个长方体 <code>cuboids</code> ，其中第 <code>i</code> 个长方体的长宽高表示为 <code>cuboids[i] = [widthi, lengthi, heighti]</code>（<strong>下标从 0 开始</strong>）。请你从 <code>cuboids</code> 选出一个 <strong>子集</strong> ，并将它们堆叠起来。</p><p>如果 <code>widthi &lt;= widthj</code> 且 <code>lengthi &lt;= lengthj</code> 且 <code>heighti &lt;= heightj</code> ，你就可以将长方体 <code>i</code> 堆叠在长方体 <code>j</code> 上。你可以通过旋转把长方体的长宽高重新排列，以将它放在另一个长方体上。</p><p>返回 <strong>堆叠长方体</strong> <code>cuboids</code> 可以得到的 <strong>最大高度</strong> 。</p><p><strong>示例 1：</strong></p><p><strong><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/12/12/image.jpg" alt="img"></strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：cuboids = [[50,45,20],[95,37,53],[45,23,12]]<br>输出：190<br>解释：<br>第<span class="hljs-number"> 1 </span>个长方体放在底部，53x37 的一面朝下，高度为<span class="hljs-number"> 95 </span>。<br>第<span class="hljs-number"> 0 </span>个长方体放在中间，45x20 的一面朝下，高度为<span class="hljs-number"> 50 </span>。<br>第<span class="hljs-number"> 2 </span>个长方体放在上面，23x12 的一面朝下，高度为<span class="hljs-number"> 45 </span>。<br>总高度是<span class="hljs-number"> 95 </span>+<span class="hljs-number"> 50 </span>+<span class="hljs-number"> 45 </span>=<span class="hljs-number"> 190 </span>。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：cuboids = <span class="hljs-string">[[38,25,45],[76,35,3]]</span><br>输出：<span class="hljs-number">76</span><br>解释：<br>无法将任何长方体放在另一个上面。<br>选择第 <span class="hljs-number">1</span> 个长方体然后旋转它，使 <span class="hljs-number">35</span>x3 的一面朝下，其高度为 <span class="hljs-number">76</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：cuboids = <span class="hljs-comment">[<span class="hljs-comment">[7,11,17]</span>,<span class="hljs-comment">[7,17,11]</span>,<span class="hljs-comment">[11,7,17]</span>,<span class="hljs-comment">[11,17,7]</span>,<span class="hljs-comment">[17,7,11]</span>,<span class="hljs-comment">[17,11,7]</span>]</span><br>输出：102<br>解释：<br>重新排列长方体后，可以看到所有长方体的尺寸都相同。<br>你可以把 11x7 的一面朝下，这样它们的高度就是 17 。<br>堆叠长方体的最大高度为 6 * 17 = 102 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == cuboids.length</code></li><li><code>1 &lt;= n &lt;= 100</code></li><li><code>1 &lt;= widthi, lengthi, heighti &lt;= 100</code></li></ul><p><a href="https://leetcode.cn/u/endlesscheng/">灵茶山艾府</a></p><p>2022.12.10</p><p>发布于 浙江</p><p><img src="https://pic.leetcode.cn/1670597058-EzWyyA-1691-2-4-cut.png" alt="1691-2-4-cut.png"></p><h4 id="答疑">答疑</h4><p><strong>问</strong>：为什么要对<em>cuboids</em>排序？</p><p><strong>答</strong>：排序后，答案对应的长方体子序列可直接按照从左到右的顺序堆叠，从而保证了状态转移的正确性，即计算 f[i]f[i]<em>f</em>[<em>i</em>] 时，可按照 ii<em>i</em> 从小到大的顺序计算，且只用考虑 j&lt;ij&lt;i<em>j</em>&lt;<em>i</em> 的状态转移来源 f[j]f[j]<em>f</em>[<em>j</em>]。如果不排序，则无法保证这些。</p><p><strong>问</strong>：为什么当 AA<em>A</em> 可以堆在 BB<em>B</em> 上时，可以直接把最长的边作为高？</p><p><strong>答</strong>：我可以换一个角度来解释。把长方体看成盒子，把 AA<em>A</em> <strong>装进</strong> BB<em>B</em> 中（三条边短对短，中对中，长对长）。由于无论 BB<em>B</em> 怎么旋转，AA<em>A</em> 始终在 BB<em>B</em> 中，那么直接把 BB<em>B</em> 按照最长的边竖着放置，AA<em>A</em> 也会按照最长的边竖着放置。</p><p><strong>问</strong>：是否有时间复杂度比 O(n2)O(n^2)<em>O</em>(<em>n</em>2) 更低的做法？</p><p><strong>答</strong>：可以用动态开点二维线段树做到 O(nlog⁡2n)O(n\log^2 n)<em>O</em>(<em>n</em>log2<em>n</em>)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxHeight</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] cuboids)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] c : cuboids)<br>            Arrays.sort(c);<br>        Arrays.sort(cuboids, (a, b) -&gt; a[<span class="hljs-number">0</span>] != b[<span class="hljs-number">0</span>] ? a[<span class="hljs-number">0</span>] - b[<span class="hljs-number">0</span>] : a[<span class="hljs-number">1</span>] != b[<span class="hljs-number">1</span>] ? a[<span class="hljs-number">1</span>] - b[<span class="hljs-number">1</span>] : a[<span class="hljs-number">2</span>] - b[<span class="hljs-number">2</span>]);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = cuboids.length;<br>        <span class="hljs-type">int</span>[] f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; ++j)<br>                <span class="hljs-comment">// 排序后，cuboids[j][0] &lt;= cuboids[i][0] 恒成立</span><br>                <span class="hljs-keyword">if</span> (cuboids[j][<span class="hljs-number">1</span>] &lt;= cuboids[i][<span class="hljs-number">1</span>] &amp;&amp; cuboids[j][<span class="hljs-number">2</span>] &lt;= cuboids[i][<span class="hljs-number">2</span>])<br>                    f[i] = Math.max(f[i], f[j]); <span class="hljs-comment">// cuboids[j] 可以堆在 cuboids[i] 上</span><br>            f[i] += cuboids[i][<span class="hljs-number">2</span>];<br>            ans = Math.max(ans, f[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度分析">复杂度分析</h4><ul><li>时间复杂度：</li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E=O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>其中 nnn 为 <em>cuboids</em> 的长度。</p><ul><li>空间复杂度：</li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E=O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><pre><code class="mermaid" >graph TD;    A-->B;    A-->C;    B-->C;    C-->D;    D-->D;</code></pre><h4 id="相似题目">相似题目</h4><ul><li><a href="https://leetcode.cn/problems/longest-increasing-subsequence/">300. 最长递增子序列</a></li><li><a href="https://leetcode.cn/problems/russian-doll-envelopes/">354. 俄罗斯套娃信封问题</a></li></ul><p>如果想加深对 LIS 的理解，还可以做做 <a href="https://leetcode.cn/problems/longest-increasing-subsequence-ii/">2407. 最长递增子序列 II</a>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>welcome</title>
    <link href="/2022/12/15/welcome/"/>
    <url>/2022/12/15/welcome/</url>
    
    <content type="html"><![CDATA[<p>这只是一个发布博客的测试</p>]]></content>
    
    
    
    <tags>
      
      <tag>第一篇文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
